#
# Globals
#

global !p

def getArgs(group):
	import re
	word = re.compile('[a-zA-z0-9_]+:\w+')
	return [i.split(":") for i in word.findall(group) ]

#
# s: The snip Object
# args: The parameter list 
#
def appendASDocParams(s, args):
	if len(args) > 0:
		s += " *"
		for i in args:
			s += " * @param " + i[0] + " "

def appendASDocReturn(s, retVal="void"):
	if retVal != "void" and retVal != "" and retVal != None:
		s += " *"
		s += " * @return "

endglobal


#
# Class Templates
#

snippet cl "Class Template" !b
//
// `!p snip.rv = snip.basename`.as
// Created by ${1:Janek Bieser} on `date "+%B %d, %Y"`
//

package ${2:package}
{
	/**
	 * `!p snip.rv = snip.basename`
	 * @author $1
	 */
	public class `!p snip.rv = snip.basename` extends ${3:Object}
	{
		/**
		 * Constructor
		 */
		public function `!p snip.rv = snip.basename`()
		{
			$0
		}
	}
}
endsnippet

snippet cldoc "Document Class Template" !b
//
// `!p snip.rv = snip.basename`.as
// Created by ${1:Janek Bieser} on `date "+%B %d, %Y"`
//

package ${2:package}
{
	import flash.display.Sprite;
	import flash.events.Event;

	/**
	 * `!p snip.rv = snip.basename`
	 * @author $1
	 */
	public class `!p snip.rv = snip.basename` extends Sprite
	{
		/**
		 * Initialization
		 */
		public function init()
		{
			$0
		}

		/**
		 * Default Constructor
		 * Initialization is done in |init|
		 */
		public function `!p snip.rv = snip.basename`()
		{
			if (this.stage == null) {
				this.addEventListener(Event.ADDED_TO_STAGE, addedToStage_handler);
			} else {
				init();
			}
		}

		private function addedToStage_handler(e:Event):void
		{
			this.removeEventListener(Event.ADDED_TO_STAGE, addedToStage_handler);
			init();
		}
	}
}
endsnippet


#
# Method Templates
#

snippet f "Function Template" b
/**`!p
snip.rv = ""

if t[1] == "private":
	snip += " * @private"
	snip += " *"
`
 * ${5:Description...}`!p

snip.rv = ""
appendASDocParams(snip, getArgs(t[3]))
appendASDocReturn(snip, t[4])
`
 */
${1:public} function ${2:name}(${3}):${4:void}
{
	${0:// TODO: Implementation}
}
endsnippet


#
# Genaral Stuff
#

snippet pu "public" !b
public
endsnippet

snippet po "public" !b
protected
endsnippet

snippet pr "public" !b
private
endsnippet

snippet im "import" !b
import
endsnippet

snippet f.d "flash.display" a
flash.display.*;$0
endsnippet

snippet f.e "flash.events" a
flash.events.*;$0
endsnippet

snippet if "if statement" b
if ($1) {
	$0
}
endsnippet

snippet ifel "if else statement" b
if ($1) {
	$2
} else {
	$0
}
endsnippet

snippet el "else statement" a
else {
	$0
}
endsnippet

snippet elif "else if statement" a
else if ($1) {
	$0
}
endsnippet
